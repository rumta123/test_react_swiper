// src/store/pointSlice.ts
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

// üîπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface Item {
  id: number;
  label: string;
}

interface PointState {
  selectedPoint: Item | null;
  targetIndex: number | null; // ‚Üê –∏–Ω–¥–µ–∫—Å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å (0‚Äì5)
}

// üîπ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: PointState = {
  selectedPoint: null,
  targetIndex: null,
};

// üîπ –°–ª–∞–π—Å
export const pointSlice = createSlice({
  name: 'point',
  initialState,
  reducers: {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
    selectPoint: (state, action: PayloadAction<Item>) => {
      state.selectedPoint = action.payload;
    },

    // –ö–æ–º–∞–Ω–¥–∞: –ø–æ–≤–µ—Ä–Ω–∏ –∫—Ä—É–≥ –∫ –∏–Ω–¥–µ–∫—Å—É (0‚Äì5)
    rotateToIndex: (state, action: PayloadAction<number>) => {
      state.targetIndex = action.payload;
    },

    // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    clearTargetIndex: (state) => {
      state.targetIndex = null;
    },
  },
});

// üîπ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
export const { selectPoint, rotateToIndex, clearTargetIndex } = pointSlice.actions;

// üîπ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–¥—å—é—Å–µ—Ä
export default pointSlice.reducer;